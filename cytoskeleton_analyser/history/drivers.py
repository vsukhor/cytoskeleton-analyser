# Copyright (c) 2021 Valerii Sukhorukov. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----------------------------------------------------------------------------

"""
Dynamic instability of microtubules.

In-depth analysis of dynamic instability of microtubules
recreated in Monte-Carlo simulations of the cell.
As input uses raw files from the simulations.
"""

import json
from typing import Optional, Sequence

from ..inout import Paths
from ..inout import set_logger
from .cell_history import CellHistory


def process(
        paths: Paths,
        rind: int,
        end: int,
        pars: dict,
        show: bool,
        features: Optional[Sequence[str]] = None,
):
    """Main entry point for processing the whole-cell history.

    History consists of records microtubule dynamic instability
    generated by simulated reconstruction.

    :param paths: Paths for input/output operations.
    :param rind: Index of the simulation run to be processed.
    :param end: Microtubule end: 0 or 1.
    :param rind: Index of the simulation run to be processed.
    :param pars: General-purpose parameters.
    :param show: If True, display the generated plots interactively.
    :param features: Features to report. If None, all are reported.
    """

    paths.data_out = paths.data_out / 'history'
    Paths.ensure(paths.data_out)
    logger = set_logger(f'history ind {rind} end {end}',
                        paths.data_out / 'history.log')

    h = CellHistory(pars, rind, end, paths, logger)

    if features is None:
        features = [
            'duration',
            'length',
            'comets',
            'frequencies',
            'spatial_maps',
            'event_collections',
        ]

    report = {}

    if 'duration' in features:
        report |= h.report_duration()

    if 'length' in features:
        report |= h.report_microtubule_lengths()

    if end == 1:
        if 'comets' in features:
            h.report_comet_radial_distribution(show)

    if 'frequencies' in features:
        report |= h.report_state_frequencies(show)

    if 'spatial_maps' in features:
        h.create_spatial_maps(show)

    if 'event_collections' in features:
        for s in h.collections.values():
            report |= s.report_by_type(show)
        h.collections['cytosol'] \
         .plot_spatial(h.cell.plasma_membrane.mesh,
                       h.recording_time['initial'], 100., show)

    fname = paths.data_out / f'report_e{end}.json'
    logger.info('Saving report: ' + str(fname) + '\n')
    with open(fname, 'w') as f:
        json.dump(report, f)
